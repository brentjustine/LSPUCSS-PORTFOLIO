

# === src\App.tsx ===
import { BrowserRouter as Router, Routes, Route, useLocation } from "react-router-dom";
import { AnimatePresence } from "framer-motion";
import { useEffect, useState } from "react";
import { supabase } from "./lib/supabaseClient";
import { Session } from "@supabase/supabase-js";

import Home from "./pages/Home";
import SubmitProject from "./pages/SubmitProject";
import Register from "./pages/Register";
import Login from "./pages/Login";
import Navbar from "./components/Navbar";
import ProtectedRoute from "./components/ProtectedRoute";
import Profile from "./pages/Profile";
import ProjectDetail from "./pages/ProjectDetail";
import UpdatePassword from "./pages/UpdatePassword";
import Users from "./pages/Users";
import UserDetail from "./pages/UserDetail";
import { Toaster } from "react-hot-toast";

function AppRoutes({ session }: { session: Session | null }) {
  const location = useLocation();

  return (
    <>
      <Navbar session={session} />
      <AnimatePresence mode="wait">
        <Routes location={location} key={location.pathname}>
          <Route path="/login" element={<Login />} />
          <Route path="/register" element={<Register />} />
          <Route
            path="/"
            element={
              <ProtectedRoute session={session}>
                <Home />
              </ProtectedRoute>
            }
          />
          <Route
            path="/submit"
            element={
              <ProtectedRoute session={session}>
                <SubmitProject />
              </ProtectedRoute>
            }
          />
          <Route
            path="/profile"
            element={
              <ProtectedRoute session={session}>
                <Profile />
              </ProtectedRoute>
            }
          />
          <Route
            path="/project/:id"
            element={
              <ProtectedRoute session={session}>
                <ProjectDetail />
              </ProtectedRoute>
            }
          />
          <Route path="/update-password" element={<UpdatePassword />} />
          <Route
            path="/users"
            element={
              <ProtectedRoute session={session}>
                <Users />
              </ProtectedRoute>
            }
          />
          <Route
            path="/user/:id"
            element={
              <ProtectedRoute session={session}>
                <UserDetail />
              </ProtectedRoute>
            }
          />
        </Routes>
      </AnimatePresence>
    </>
  );
}

export default function App() {
  const [session, setSession] = useState<Session | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const loadSession = async () => {
      const { data } = await supabase.auth.getSession();
      setSession(data.session ?? null);
      setLoading(false);
    };

    loadSession();

    const { data: listener } = supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session);
    });

    return () => {
      listener.subscription.unsubscribe();
    };
  }, []);

  if (loading) {
    return (
      <div className="flex items-center justify-center h-screen text-lg font-semibold">
        Loading...
      </div>
    );
  }

  return (
    <Router>
      <Toaster position="top-right" />
      <AppRoutes session={session} />
    </Router>
  );
}


# === src\index.css ===
@tailwind base;
@tailwind components;
@tailwind utilities;
@keyframes fade-in-up {
  from {
    opacity: 0;
    transform: translateY(12px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.animate-fade-in-up {
  animation: fade-in-up 0.25s ease-out;
}


# === src\main.tsx ===
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App.tsx';
import './index.css';
import { AuthProvider } from './contexts/AuthContext'; // ✅

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <AuthProvider>
      <App />
    </AuthProvider>
  </React.StrictMode>
);


# === src\components\Navbar.tsx ===
// === src/components/Navbar.tsx ===
import { useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import { useAuth } from "../contexts/AuthContext";
import { supabase } from "../lib/supabaseClient";
import {
  FaHome,
  FaSignOutAlt,
  FaSignInAlt,
  FaUserPlus,
  FaUserCircle,
  FaBars,
  FaTimes,
  FaUsers,
  FaSearch,
} from "react-icons/fa";

export default function Navbar() {
  const { user } = useAuth();
  const navigate = useNavigate();
  const [isOpen, setIsOpen] = useState(false);
  const [search, setSearch] = useState("");

  const handleLogout = async () => {
    await supabase.auth.signOut();
    navigate("/login");
  };

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    if (search.trim()) {
      navigate(`/users?q=${encodeURIComponent(search.trim())}`);
      setSearch("");
    }
  };

  const toggleMenu = () => setIsOpen(!isOpen);
  const closeMenu = () => setIsOpen(false);

  const NavLinks = () => (
    <>
      <Link to="/" onClick={closeMenu} className="flex items-center gap-2 hover:opacity-90">
        <FaHome /> Home
      </Link>
      <Link to="/users" onClick={closeMenu} className="flex items-center gap-2 hover:opacity-90">
        <FaUsers /> Users
      </Link>
      <Link to="/profile" onClick={closeMenu} className="flex items-center gap-2 hover:opacity-90">
        <FaUserCircle /> Profile
      </Link>
      <button onClick={handleLogout} className="flex items-center gap-2 hover:opacity-90">
        <FaSignOutAlt /> Logout
      </button>
    </>
  );

  const GuestLinks = () => (
    <>
      <Link to="/login" onClick={closeMenu} className="flex items-center gap-2 hover:opacity-90">
        <FaSignInAlt /> Login
      </Link>
      <Link to="/register" onClick={closeMenu} className="flex items-center gap-2 hover:opacity-90">
        <FaUserPlus /> Register
      </Link>
    </>
  );

  return (
    <nav className="bg-blue-600 text-white sticky top-0 z-50 shadow-md">
      <div className="px-6 py-4 flex flex-wrap items-center justify-between gap-4">
        <div className="flex items-center gap-6">
          <Link to="/" className="text-xl sm:text-2xl font-bold animate-pulse">
            📚 LSPU CCS PORTFOLIO
          </Link>

          {/* Search bar (only when logged in) */}
          {user && (
            <form
              onSubmit={handleSearch}
              className="hidden md:flex items-center gap-2"
            >
              <input
                type="text"
                value={search}
                onChange={(e) => setSearch(e.target.value)}
                placeholder="Search users..."
                className="px-3 py-1 rounded text-black md:w-64"
              />
              <button type="submit" className="bg-white text-blue-600 px-3 py-1 rounded">
                <FaSearch />
              </button>
            </form>
          )}
        </div>

        {/* Desktop Nav */}
        <div className="hidden md:flex gap-6 text-sm sm:text-base items-center">
          {user ? <NavLinks /> : <GuestLinks />}
        </div>

        {/* Mobile toggle */}
        <button
          className="text-2xl md:hidden focus:outline-none"
          onClick={toggleMenu}
          aria-label="Toggle Menu"
        >
          {isOpen ? <FaTimes /> : <FaBars />}
        </button>
      </div>

      {/* Mobile Menu */}
      {isOpen && (
        <div className="md:hidden px-6 pb-4 flex flex-col gap-4 text-sm sm:text-base animate-slide-down">
          {user && (
            <form onSubmit={handleSearch} className="flex items-center gap-2">
              <input
                type="text"
                value={search}
                onChange={(e) => setSearch(e.target.value)}
                placeholder="Search users..."
                className="px-3 py-1 rounded text-black w-full"
              />
              <button type="submit" className="bg-white text-blue-600 px-3 py-1 rounded">
                <FaSearch />
              </button>
            </form>
          )}
          {user ? <NavLinks /> : <GuestLinks />}
        </div>
      )}
    </nav>
  );
}


# === src\components\ProjectCard.tsx ===
import { FaUserCircle } from 'react-icons/fa';

interface Props {
  title: string;
  description: string;
  student_name: string;
}

const ProjectCard: React.FC<Props> = ({ title, description, student_name }) => (
  <div className="bg-white rounded-2xl shadow-md p-6 border border-gray-100 hover:shadow-xl transition-all transform hover:scale-[1.02] duration-300">
    <h3 className="text-xl font-bold text-gray-800 mb-2">{title}</h3>
    <p className="text-gray-600 mb-4">{description}</p>
    <div className="flex items-center text-indigo-600 font-medium gap-2 text-sm">
      <FaUserCircle className="text-lg" />
      By: {student_name}
    </div>
  </div>
);

export default ProjectCard;


# === src\components\ProtectedRoute.tsx ===
import { Navigate } from 'react-router-dom';
import { ReactNode } from 'react';
import { Session } from '@supabase/supabase-js';

export default function ProtectedRoute({
  children,
  session,
}: {
  children: ReactNode;
  session: Session | null;
}) {
  if (!session) {
    return <Navigate to="/login" replace />;
  }
  return <>{children}</>;
}


# === src\contexts\AuthContext.tsx ===
import { createContext, useContext, useEffect, useState } from 'react';
import { supabase } from '../lib/supabaseClient';

const AuthContext = createContext<any>(null);

export const AuthProvider = ({ children }: { children: React.ReactNode }) => {
  const [user, setUser] = useState<any>(null);

  useEffect(() => {
    supabase.auth.getUser().then(({ data }) => setUser(data.user));

    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange((_event, session) => {
      setUser(session?.user || null);
    });

    return () => subscription.unsubscribe();
  }, []);

  return <AuthContext.Provider value={{ user }}>{children}</AuthContext.Provider>;
};

export const useAuth = () => useContext(AuthContext);


# === src\lib\supabaseClient.ts ===
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://jvqguqwpbcsdxjbfutxw.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp2cWd1cXdwYmNzZHhqYmZ1dHh3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM5NjQ0OTgsImV4cCI6MjA2OTU0MDQ5OH0.lL7du3C9MojGJxRwV6lQqLXcF1JfL8KJS5-8JRWnDfI'; // Your full key
export const supabase = createClient(supabaseUrl, supabaseKey);


# === src\pages\Auth.tsx ===
import { useState } from 'react';
import { supabase } from '../lib/supabaseClient';

export default function Auth() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [isLogin, setIsLogin] = useState(true);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const { error } = isLogin
      ? await supabase.auth.signInWithPassword({ email, password })
      : await supabase.auth.signUp({ email, password });

    if (error) alert(error.message);
    else alert('✅ Success!');
  };

  return (
    <form onSubmit={handleSubmit} className="max-w-sm mx-auto p-4">
      <h1 className="text-xl font-bold mb-4">{isLogin ? 'Login' : 'Register'}</h1>
      <input
        className="w-full p-2 border rounded mb-2"
        type="email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        placeholder="Email"
        required
      />
      <input
        className="w-full p-2 border rounded mb-2"
        type="password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        placeholder="Password"
        required
      />
      <button className="w-full bg-blue-500 text-white py-2 rounded">
        {isLogin ? 'Login' : 'Register'}
      </button>
      <p className="mt-2 text-center text-sm">
        {isLogin ? 'Need an account?' : 'Already have one?'}{' '}
        <span onClick={() => setIsLogin(!isLogin)} className="text-blue-600 cursor-pointer underline">
          {isLogin ? 'Register' : 'Login'}
        </span>
      </p>
    </form>
  );
}


# === src\pages\Home.tsx ===
import React, { useEffect, useState } from "react";
import { supabase } from "../lib/supabaseClient";
import { Link, useNavigate } from "react-router-dom";
import ProjectCard from "./Projects";
import {
  PieChart, Pie, Cell, Tooltip, Legend,
  BarChart, Bar, XAxis, YAxis, ResponsiveContainer,
} from "recharts";
import {
  AiOutlineAppstore, AiOutlineRobot, AiOutlinePlus,
} from "react-icons/ai";
import toast from "react-hot-toast";

const TABS = [
  { name: "Projects", icon: <AiOutlineAppstore className="text-xl" /> },
  { name: "AI Overview", icon: <AiOutlineRobot className="text-xl" /> },
];

const COLORS = ["#3b82f6", "#e5e7eb"];

const toastConfirm = (message: string) =>
  new Promise<boolean>((resolve) => {
    const id = toast.custom((t) => (
      <div className="bg-white shadow-lg rounded p-4 flex flex-col items-start gap-3 w-72">
        <span className="text-sm text-gray-800">{message}</span>
        <div className="flex gap-2 self-end">
          <button onClick={() => { toast.dismiss(id); resolve(true); }} className="px-3 py-1 text-sm text-white bg-red-600 rounded">Yes</button>
          <button onClick={() => { toast.dismiss(id); resolve(false); }} className="px-3 py-1 text-sm text-gray-600 border rounded">Cancel</button>
        </div>
      </div>
    ));
  });

export default function Home() {
  const [activeTab, setActiveTab] = useState("Projects");
  const [projects, setProjects] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [aiSummary, setAiSummary] = useState<string | null>(null);
  const [selectedProjects, setSelectedProjects] = useState<Set<number>>(new Set());

  const navigate = useNavigate();

  const getUser = async () => {
    const { data } = await supabase.auth.getUser();
    return data?.user;
  };

  const fetchProjects = async (refreshAISummary = false) => {
    const user = await getUser();
    if (!user) return toast.error("Authentication failed.");

    const { data, error } = await supabase.from("projects").select("*").eq("user_id", user.id);
    if (error) return toast.error("Failed to fetch projects.");

    setProjects(data || []);
    if (refreshAISummary) fetchAISummary(user.id, data?.length || 0);
    setLoading(false);
  };

  const fetchAISummary = async (userId: string, projectCount: number) => {
    try {
      const res = await fetch(`http://127.0.0.1:8000/summary?user_id=${userId}`);
      const json = await res.json();
      const summary = json.summary || "No summary available.";

      setAiSummary(summary);
      localStorage.setItem(`aiSummary:${userId}`, summary);
      localStorage.setItem(`projectsCount:${userId}`, projectCount.toString());
    } catch {
      setAiSummary("Failed to fetch summary.");
    }
  };

  useEffect(() => {
    const init = async () => {
      const user = await getUser();
      if (!user) return;
      const cached = localStorage.getItem(`aiSummary:${user.id}`);
      if (cached) setAiSummary(cached);
      await fetchProjects();
    };

    init();

    const subscription = supabase
      .channel("public:projects")
      .on("postgres_changes", { event: "*", schema: "public", table: "projects" }, () => fetchProjects())
      .subscribe();

    return () => supabase.removeChannel(subscription);
  }, []);

  useEffect(() => {
    const refresh = async () => {
      const user = await getUser();
      if (!user) return;
      if (localStorage.getItem("ai_refresh_needed") === "true") {
        await fetchAISummary(user.id, projects.length);
        localStorage.setItem("ai_refresh_needed", "false");
      }
    };
    refresh();
  }, [projects]);

  const toggleSelectProject = (id: number) => {
    setSelectedProjects((prev) => {
      const next = new Set(prev);
      next.has(id) ? next.delete(id) : next.add(id);
      return next;
    });
  };

  const handleDelete = async () => {
    if (selectedProjects.size === 0) return toast("No projects selected.");
    const confirmed = await toastConfirm(`Delete ${selectedProjects.size} project(s)?`);
    if (!confirmed) return;

    setLoading(true);
    const ids = Array.from(selectedProjects);

    // Delete storage files
    const { data: filesToDelete } = await supabase.from("projects").select("file_paths").in("id", ids);
    const paths = (filesToDelete || []).flatMap(p => {
      try {
        return p.file_paths.map((f: string) => JSON.parse(f).path);
      } catch {
        return [];
      }
    });
    if (paths.length > 0) {
      const { error } = await supabase.storage.from("projects").remove(paths);
      if (error) return toast.error("Storage delete failed: " + error.message);
    }

    // Delete projects
    const { error: deleteError } = await supabase.from("projects").delete().in("id", ids);
    if (deleteError) {
      toast.error("Delete failed: " + deleteError.message);
      setLoading(false);
      return;
    }

    toast.success("Deleted successfully.");
    setSelectedProjects(new Set());

    // Wait a little before refetching to allow Supabase to sync
    setTimeout(async () => {
      const user = await getUser();
      if (user) {
        localStorage.removeItem(`aiSummary:${user.id}`);
        localStorage.removeItem(`projectsCount:${user.id}`);
        localStorage.setItem("ai_refresh_needed", "true");
        await fetchProjects(true); // This will call fetchAISummary inside
      }
      setLoading(false);
    }, 1000); // 🕒 Wait 1 second to avoid stale results
  };


  const averageScore = projects.length > 0
    ? projects.reduce((acc, p) => acc + (p.ai_score || 0), 0) / projects.length
    : 0;

  const pieData = [
    { name: "Score", value: averageScore },
    { name: "Remaining", value: 10 - averageScore },
  ];

  const barData = projects.map(p => ({
    name: p.title,
    score: p.ai_score ?? 0,
  }));

  return (
    <div className="max-w-5xl mx-auto mt-6 px-4 pb-20 relative">
      <div className="flex gap-2 border-b pb-2 mb-4 overflow-x-auto">
        {TABS.map((tab) => (
          <button
            key={tab.name}
            onClick={() => setActiveTab(tab.name)}
            className={`flex items-center gap-2 px-4 py-2 rounded-t font-semibold transition-all text-sm md:text-base ${
              activeTab === tab.name ? "bg-blue-500 text-white" : "bg-gray-100 text-gray-800"
            }`}
          >
            <span className="md:hidden">{tab.icon}</span>
            <span className="hidden md:inline">{tab.name}</span>
          </button>
        ))}
      </div>

      {loading && <div className="text-center py-10 text-gray-500 animate-pulse">⏳ Loading projects...</div>}

      {!loading && activeTab === "Projects" && (
        <>
          {selectedProjects.size > 0 && (
            <button
              onClick={handleDelete}
              className="mb-4 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition"
            >
              Delete Selected ({selectedProjects.size})
            </button>
          )}

          <div className="space-y-4">
            {projects.length === 0 ? (
              <div className="text-center py-20 text-gray-500 space-y-4">
                <div className="text-6xl">📁</div>
                <p className="text-lg font-medium">No projects yet</p>
                <p className="text-sm text-gray-400">Click the <AiOutlinePlus className="inline text-base" /> button to add one!</p>
              </div>
            ) : (
              projects.map((project) => (
                <div key={project.id} className="flex items-start gap-2">
                  <input
                    type="checkbox"
                    checked={selectedProjects.has(project.id)}
                    onChange={() => toggleSelectProject(project.id)}
                    onClick={(e) => e.stopPropagation()}
                    className="mt-3 w-5 h-5 accent-blue-600"
                  />
                  <Link to={`/project/${project.id}`} className="flex-1 block no-underline">
                    <ProjectCard
                      title={project.title}
                      description={project.description}
                      ai_score={project.ai_score}
                    />
                  </Link>
                </div>
              ))
            )}
          </div>
        </>
      )}

      {!loading && activeTab === "AI Overview" && (
        <div className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="bg-white rounded shadow p-4 flex flex-col items-center">
              <h3 className="text-base md:text-lg font-bold mb-4 text-center">Overall AI Score</h3>
              <PieChart width={250} height={250}>
                <Pie
                  data={pieData}
                  dataKey="value"
                  nameKey="name"
                  cx="50%"
                  cy="50%"
                  innerRadius={60}
                  outerRadius={100}
                >
                  {pieData.map((entry, i) => (
                    <Cell key={`cell-${i}`} fill={COLORS[i % COLORS.length]} />
                  ))}
                </Pie>
                <Tooltip />
                <Legend />
              </PieChart>
            </div>

            <div className="bg-white p-4 md:p-6 rounded shadow flex justify-center items-center min-h-[300px]">
              {projects.length === 0 ? (
                <p className="text-gray-500 text-center">No performance data available yet.</p>
              ) : (
                <ResponsiveContainer width="95%" height={300}>
                  <BarChart data={barData} margin={{ top: 20, right: 30, left: 20, bottom: 40 }}>
                    <XAxis dataKey="name" tick={{ fontSize: 12 }} />
                    <YAxis domain={[0, 10]} />
                    <Tooltip />
                    <Bar dataKey="score" fill="#3b82f6" radius={[4, 4, 0, 0]} />
                  </BarChart>
                </ResponsiveContainer>
              )}
            </div>
          </div>

          <div className="bg-white rounded shadow p-4">
            <h3 className="text-base md:text-lg font-bold mb-2">AI Learning Path</h3>
            <p className="text-sm text-gray-700 whitespace-pre-wrap">
              {aiSummary ?? "Loading AI summary..."}
            </p>
          </div>
        </div>
      )}

      <button
        onClick={() => navigate("/submit")}
        className="fixed bottom-5 right-5 md:bottom-6 md:right-10 z-50 bg-blue-600 text-white rounded-full p-4 shadow-lg hover:bg-blue-700 transition"
      >
        <AiOutlinePlus className="text-2xl" />
      </button>
    </div>
  );
}


# === src\pages\Login.tsx ===
import { useEffect, useState } from "react";
import { useNavigate, Link } from "react-router-dom";
import { supabase } from "../lib/supabaseClient";

export default function Login() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState<string | null>(null);
  const [info, setInfo] = useState<string | null>(null);
  const navigate = useNavigate();

  // Lock scroll when login page is mounted
  useEffect(() => {
    document.body.style.overflow = "hidden";
    return () => {
      document.body.style.overflow = "auto"; // Reset scroll when leaving
    };
  }, []);

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    const { error } = await supabase.auth.signInWithPassword({ email, password });
    if (error) {
      setError(error.message);
    } else {
      navigate("/");
    }
  };

  const handleForgotPassword = async () => {
    setError(null);
    setInfo(null);
    if (!email) {
      setError("Enter your email first to reset password.");
      return;
    }

    const { error } = await supabase.auth.resetPasswordForEmail(email, {
      redirectTo: "http://localhost:5173/update-password",
    });

    if (error) {
      setError(error.message);
    } else {
      setInfo("Password reset link sent to your email.");
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 px-4 py-8 flex justify-center">
      <div className="bg-white p-6 rounded-xl shadow w-full max-w-md self-start">
        <h1 className="text-2xl font-bold mb-4 text-center">🔐 Login</h1>

        {error && <div className="text-sm text-red-600 bg-red-100 p-3 rounded mb-3">{error}</div>}
        {info && <div className="text-sm text-green-600 bg-green-100 p-3 rounded mb-3">{info}</div>}

        <form onSubmit={handleLogin} className="space-y-4">
          <input
            type="email"
            placeholder="Email"
            className="w-full p-2 border rounded"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
          <input
            type="password"
            placeholder="Password"
            className="w-full p-2 border rounded"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
          <button
            type="submit"
            className="w-full bg-blue-600 text-white p-2 rounded hover:bg-blue-700 transition"
          >
            Login
          </button>
        </form>

        <div className="mt-4 text-center text-sm text-gray-600 space-y-2">
          <p>
            Not yet registered?{" "}
            <Link to="/register" className="text-blue-600 hover:underline">
              Register here
            </Link>
          </p>
          <p>
            Forgot your password?{" "}
            <button
              type="button"
              className="text-blue-600 hover:underline"
              onClick={handleForgotPassword}
            >
              Reset it
            </button>
          </p>
        </div>
      </div>
    </div>
  );
}


# === src\pages\Profile.tsx ===
import { useEffect, useState, useRef } from 'react';
import { supabase } from '../lib/supabaseClient';
import toast from 'react-hot-toast';

export default function Profile() {
  const [user, setUser] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [bio, setBio] = useState('');
  const [profilePicUrl, setProfilePicUrl] = useState('');
  const [file, setFile] = useState<File | null>(null);
  const [preview, setPreview] = useState<string | null>(null);

  const dropRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    (async () => {
      const { data: { user } } = await supabase.auth.getUser();
      setUser(user);
      if (user) {
        setProfilePicUrl(user.user_metadata?.profile_pic || '');
        setBio(user.user_metadata?.bio || '');
      }
      setLoading(false);
    })();
  }, []);

  const handleFile = (f: File) => {
    setFile(f);
    setPreview(URL.createObjectURL(f));
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      handleFile(e.target.files[0]);
    }
  };

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      handleFile(e.dataTransfer.files[0]);
    }
  };

  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
  };

  const handleUpdate = async (e: React.FormEvent) => {
    e.preventDefault();

    const toastId = toast.loading("Updating profile...");
    let uploadedImageUrl = profilePicUrl;

    try {
      if (file && user) {
        if (profilePicUrl && user) {
          const ext = profilePicUrl.split('.').pop()?.split('?')[0]; // handles ?t= cache busting
          const oldPath = `avatars/${user.id}.${ext}`;
          await supabase.storage.from('avatars').remove([oldPath]);
        }

        const fileExt = file.name.split('.').pop();
        const filePath = `avatars/${user.id}.${fileExt}`;

        const { error: uploadError } = await supabase.storage
          .from('avatars')
          .upload(filePath, file, { upsert: true });

        if (uploadError) {
          toast.error('Image upload failed: ' + uploadError.message, { id: toastId });
          return;
        }

        const { data } = supabase.storage.from('avatars').getPublicUrl(filePath);
        uploadedImageUrl = data.publicUrl;
      }

      // 👇 Update auth user metadata
      const { error: updateAuthError } = await supabase.auth.updateUser({
        data: {
          profile_pic: uploadedImageUrl,
          bio: bio,
        },
      });

      if (updateAuthError) {
        toast.error('Failed to update profile: ' + updateAuthError.message, { id: toastId });
        return;
      }

      // 👇 Now also update the `profiles` table to sync for /users page
      const { error: updateDbError } = await supabase.from('profiles').update({
        profile_picture_url: uploadedImageUrl,
        bio: bio,
      }).eq('id', user.id);

      if (updateDbError) {
        toast.error('DB profile update failed: ' + updateDbError.message, { id: toastId });
        return;
      }

      setProfilePicUrl(uploadedImageUrl);
      setFile(null);
      setPreview(null);
      toast.success('Profile updated!', { id: toastId });

    } catch (err: any) {
      toast.error('Something went wrong: ' + err.message, { id: toastId });
    }
  };


  if (loading) return <p className="text-center mt-20">Loading...</p>;

  return (
    <div className="max-w-md mx-auto mt-20 bg-white p-6 rounded-xl shadow-lg space-y-6">
      <h2 className="text-2xl font-bold text-center">👤 Your Profile</h2>

      <div className="space-y-4 text-center">
        <p><strong>Full Name:</strong> {user.user_metadata?.full_name}</p>
        <p><strong>Email:</strong> {user.email}</p>
        {profilePicUrl && !preview && (
          <img
            src={profilePicUrl}
            alt="Profile"
            className="w-24 h-24 rounded-full object-cover border mx-auto"
          />
        )}
        {preview && (
          <img
            src={preview}
            alt="New Profile Preview"
            className="w-24 h-24 rounded-full object-cover border mx-auto"
          />
        )}
      </div>

      <form onSubmit={handleUpdate} className="space-y-4">
        <div
          ref={dropRef}
          onDrop={handleDrop}
          onDragOver={handleDragOver}
          onClick={() => dropRef.current?.querySelector('input')?.click()}
          className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center cursor-pointer hover:border-blue-400 transition"
        >
          <p className="text-gray-600 mb-2">Drag and drop your image here</p>
          <p className="text-sm text-gray-500">or click to browse</p>
          <input
            type="file"
            accept="image/*"
            onChange={handleFileChange}
            className="hidden"
          />
        </div>

        <textarea
          name="bio"
          value={bio}
          onChange={(e) => setBio(e.target.value)}
          placeholder="Your bio..."
          className="w-full p-3 border rounded"
        />

        <button
          type="submit"
          className="w-full bg-green-600 text-white py-2 rounded hover:bg-green-700 transition"
        >
          Save Changes
        </button>
      </form>
    </div>
  );
}


# === src\pages\ProjectDetail.tsx ===
import { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import { supabase } from "../lib/supabaseClient";
import { PieChart, Pie, Cell } from "recharts";

interface Project {
  id: number;
  title: string;
  description: string;
  ai_score: number | null;
  ai_suggestions: string | string[] | null;
}

const COLORS = ["#10B981", "#E5E7EB"];

export default function ProjectDetail() {
  const { id } = useParams();
  const [project, setProject] = useState<Project | null>(null);
  const [loading, setLoading] = useState(true);
  const [showFullDescription, setShowFullDescription] = useState(false);

  useEffect(() => {
    const fetchProject = async () => {
      const { data, error } = await supabase
        .from("projects")
        .select("id, title, description, ai_score, ai_suggestions")
        .eq("id", id)
        .single();

      if (!error && data) setProject(data);
      setLoading(false);
    };

    fetchProject();
  }, [id]);

  if (loading) return <div className="text-center mt-10">Loading...</div>;
  if (!project) return <div className="text-center mt-10 text-red-500">Project not found.</div>;

  const safeScore = project.ai_score ?? 0;

  const aiScoreData = [
    { name: "Score", value: safeScore },
    { name: "Remaining", value: 10 - safeScore },
  ];

  const suggestions = Array.isArray(project.ai_suggestions)
    ? project.ai_suggestions
    : typeof project.ai_suggestions === "string"
    ? project.ai_suggestions.split(/\d+\.\s+/).filter(Boolean)
    : [];

  const truncatedDescription =
    project.description.length > 150 && !showFullDescription
      ? project.description.slice(0, 150) + "..."
      : project.description;

  return (
    <div className="max-w-3xl mx-auto px-4 py-10">
      <div className="bg-white rounded-xl shadow-md p-6 space-y-10">
        {/* Title */}
        <h1 className="text-3xl font-bold text-center text-gray-800">{project.title}</h1>

        {/* AI Score */}
        <div className="flex justify-center items-center flex-col space-y-2">
          <h2 className="text-lg font-semibold text-gray-700">AI Score</h2>
          <div className="relative">
            <PieChart width={200} height={200}>
              <Pie
                data={aiScoreData}
                dataKey="value"
                innerRadius={60}
                outerRadius={80}
                startAngle={90}
                endAngle={-270}
              >
                {aiScoreData.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={COLORS[index]} />
                ))}
              </Pie>
            </PieChart>
            <div className="absolute inset-0 flex items-center justify-center text-green-600 text-xl font-bold">
              {safeScore.toFixed(1)} / 10
            </div>
          </div>
        </div>

        {/* Description */}
        <div>
          <h2 className="text-lg font-semibold text-gray-700 mb-1">Project Description</h2>
          <p className="text-gray-600 text-sm leading-relaxed">
            {truncatedDescription}
            {project.description.length > 150 && (
              <span
                onClick={() => setShowFullDescription(!showFullDescription)}
                className="text-blue-500 ml-1 cursor-pointer underline"
              >
                {showFullDescription ? "Show less" : "Read more"}
              </span>
            )}
          </p>
        </div>

        {/* AI Suggestions */}
        <div>
          <h2 className="text-lg font-semibold text-green-700 mb-4">🌟 AI Suggestions</h2>
          {suggestions.length > 0 ? (
            <div className="space-y-4">
              {suggestions.map((s, index) => {
                const [titleMatch, ...rest] = s.split(":");
                const title = titleMatch?.trim() || `Suggestion ${index + 1}`;
                const content = rest.join(":").trim();

                return (
                  <div
                    key={index}
                    className="bg-gray-50 border-l-4 border-green-500 p-4 rounded shadow-sm"
                  >
                    <h3 className="text-md font-semibold text-gray-800 mb-1">✅ {title}</h3>
                    <p className="text-gray-700 text-sm whitespace-pre-line leading-relaxed">
                      {content}
                    </p>
                  </div>
                );
              })}
            </div>
          ) : (
            <p className="text-gray-500 text-sm">No AI suggestions available.</p>
          )}
        </div>
      </div>
    </div>
  );
}


# === src\pages\Projects.tsx ===
import React from "react";

interface Props {
  title: string;
  description: string;
  ai_score?: number;
}

const ProjectCard: React.FC<Props> = ({ title, description, ai_score }) => (
  <div className="bg-white rounded-2xl shadow-md p-4 hover:shadow-xl transition flex justify-between items-start border border-transparent hover:border-blue-300">
    <div className="flex-1 pr-4">
      <h3 className="text-lg font-semibold text-gray-800">{title}</h3>
      <p className="text-gray-500 text-sm mt-1 line-clamp-2">{description}</p>
    </div>
    <div className="flex-shrink-0">
      <span className="bg-blue-100 text-blue-800 text-sm font-semibold px-3 py-1 rounded-full">
        AI Score: {ai_score?.toFixed(1) ?? "N/A"}/10
      </span>
    </div>
  </div>
);

export default ProjectCard;


# === src\pages\Register.tsx ===
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { supabase } from "../lib/supabaseClient";
import toast from "react-hot-toast";

export default function Register() {
  const [form, setForm] = useState({
    full_name: "",
    email: "",
    password: "",
  });
  const [file, setFile] = useState<File | null>(null);
  const [previewUrl, setPreviewUrl] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const image = e.target.files[0];
      setFile(image);
      setPreviewUrl(URL.createObjectURL(image));
    }
  };

  const handleRegister = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    let profilePicUrl = "";

    try {
      if (file) {
        const fileExt = file.name.split(".").pop();
        const filePath = `avatars/${form.email}.${fileExt}`;

        const { error: uploadError } = await supabase.storage
          .from("avatars")
          .upload(filePath, file, { upsert: true });

        if (uploadError) {
          toast.error("📛 Failed to upload image: " + uploadError.message);
          return;
        }

        const { data } = supabase.storage.from("avatars").getPublicUrl(filePath);
        profilePicUrl = data.publicUrl;
      }

      const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
        email: form.email,
        password: form.password,
        options: {
          data: {
            full_name: form.full_name,
            profile_pic: profilePicUrl || null,
          },
        },
      });

      if (signUpError) {
        toast.error("❌ " + signUpError.message);
        return;
      }

      const userId = signUpData?.user?.id;
      if (!userId) {
        toast.error("❌ Failed to retrieve user ID after signup");
        return;
      }
      await supabase.from('profiles').upsert({
        id: userId,
        full_name: form.full_name,
        profile_picture_url: profilePicUrl || null,
        is_public: true,
      });

      toast.success("📬 Check your email to confirm your registration");
      navigate("/login");
    } catch (err: any) {
      toast.error("⚠️ Registration failed: " + err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <form
      onSubmit={handleRegister}
      className="max-w-md mx-auto mt-12 bg-white p-6 rounded-2xl shadow-xl space-y-6 animate-fade-in"
    >
      <h2 className="text-3xl font-bold text-center text-blue-700">📝 Register</h2>

      <input
        type="text"
        name="full_name"
        value={form.full_name}
        onChange={handleChange}
        placeholder="Full Name"
        required
        className="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
      />

      <input
        type="email"
        name="email"
        value={form.email}
        onChange={handleChange}
        placeholder="Email"
        required
        className="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
      />

      <input
        type="password"
        name="password"
        value={form.password}
        onChange={handleChange}
        placeholder="Password"
        required
        className="w-full p-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
      />

      <div className="text-sm font-semibold text-gray-700">Optional Profile Picture</div>
      <label className="cursor-pointer border-dashed border-2 border-gray-300 rounded-xl flex flex-col items-center justify-center p-4 hover:border-blue-400 transition">
        {previewUrl ? (
          <img
            src={previewUrl}
            alt="Preview"
            className="w-24 h-24 rounded-full object-cover shadow"
          />
        ) : (
          <div className="text-gray-400 text-center">
            <span className="text-4xl">📁</span>
            <p className="mt-1">Click to upload</p>
          </div>
        )}
        <input type="file" accept="image/*" onChange={handleFileChange} className="hidden" />
      </label>

      <button
        type="submit"
        disabled={loading}
        className={`w-full py-2 rounded-lg font-semibold text-white transition ${
          loading ? "bg-blue-400 cursor-not-allowed" : "bg-blue-600 hover:bg-blue-700"
        }`}
      >
        {loading ? "Registering..." : "🚀 Register"}
      </button>
    </form>
  );
}


# === src\pages\SubmitProject.tsx ===
import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { supabase } from "../lib/supabaseClient";
import toast from "react-hot-toast";

export default function SubmitProject() {
  const [form, setForm] = useState({ title: "", description: "" });
  const [files, setFiles] = useState<File[]>([]);
  const navigate = useNavigate();

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    setForm((prev) => ({ ...prev, [e.target.name]: e.target.value }));
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      setFiles(Array.from(e.target.files));
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    await toast.promise(
      (async () => {
        // 🔐 Get user
        const { data: userData, error: userError } = await supabase.auth.getUser();
        if (userError || !userData?.user) throw new Error("User not authenticated.");
        const user = userData.user;

        // 📤 Upload files to Supabase Storage
        const uploadedFiles: { path: string; url: string }[] = [];

        for (const file of files) {
          const filePath = `${user.id}/${Date.now()}-${file.name}`;
          const { error: uploadError } = await supabase.storage
            .from("projects")
            .upload(filePath, file);

          if (uploadError) throw uploadError;

          const { data: publicUrlData } = supabase.storage
            .from("projects")
            .getPublicUrl(filePath);

          if (!publicUrlData?.publicUrl) throw new Error("Failed to get file URL.");

          uploadedFiles.push({ path: filePath, url: publicUrlData.publicUrl });
        }

        // 🤖 Send to backend AI service
        const aiRes = await fetch("http://127.0.0.1:8000/submit", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            student_name: user.email,
            title: form.title,
            description: form.description,
            file_url: uploadedFiles[0]?.url || null, // Just the first file for analysis
          }),
        });

        if (!aiRes.ok) throw new Error("AI processing failed.");
        const ai = await aiRes.json();

        // 💾 Save to Supabase DB
        const { error: dbError } = await supabase.from("projects").insert({
          user_id: user.id,
          student_name: user.email,
          title: form.title,
          description: form.description,
          file_url: uploadedFiles[0]?.url || null,
          file_paths: uploadedFiles,
          ai_score: ai.ai_score ?? null,
          ai_suggestions: ai.ai_suggestions ?? null,
          ai_learning_path: ai.ai_learning_path ?? null,
        });

        if (dbError) throw dbError;

        localStorage.setItem("ai_refresh_needed", "true");
        navigate("/");
      })(),
      {
        loading: "Submitting your project...",
        success: "✅ Project submitted!",
        error: (err) => `❌ ${err.message || "Submission failed"}`,
      }
    );
  };

  return (
    <form
      onSubmit={handleSubmit}
      className="max-w-xl mx-auto mt-10 bg-white p-6 rounded-xl shadow-md space-y-5"
    >
      <h1 className="text-2xl font-bold text-center">📤 Submit Your Project</h1>

      <input
        name="title"
        value={form.title}
        onChange={handleChange}
        placeholder="Project Title"
        className="w-full p-3 border rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
        required
      />

      <textarea
        name="description"
        value={form.description}
        onChange={handleChange}
        placeholder="Project Description"
        className="w-full p-3 border rounded focus:outline-none focus:ring-2 focus:ring-blue-400"
        required
      />

      <div className="w-full">
        <label className="block font-semibold mb-1">📁 Upload Files (optional)</label>
        <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-blue-400 transition">
          <input
            type="file"
            id="fileUpload"
            multiple
            onChange={handleFileChange}
            className="hidden"
          />
          <label
            htmlFor="fileUpload"
            className="cursor-pointer flex flex-col items-center gap-2"
          >
            <span className="text-3xl">📎</span>
            <span className="text-gray-600">
              Click or drag files here to upload
            </span>
            <span className="text-sm text-gray-400">
              (ZIP, code, docs, images, etc.)
            </span>
          </label>
        </div>

        {files.length > 0 && (
          <ul className="mt-3 text-sm text-gray-700 space-y-1">
            {files.map((file, i) => (
              <li key={i}>• {file.name}</li>
            ))}
          </ul>
        )}
      </div>

      <button
        type="submit"
        className="w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700 transition font-semibold"
      >
        🚀 Submit Project
      </button>
    </form>
  );
}


# === src\pages\UpdatePassword.tsx ===
import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { supabase } from "../lib/supabaseClient";

export default function UpdatePassword() {
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const navigate = useNavigate();

  useEffect(() => {
    document.body.style.overflow = "hidden";
    return () => {
      document.body.style.overflow = "auto";
    };
  }, []);

  const handleUpdate = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setSuccess(null);

    if (newPassword !== confirmPassword) {
      setError("Passwords do not match.");
      return;
    }

    const { error } = await supabase.auth.updateUser({ password: newPassword });

    if (error) {
      setError(error.message);
    } else {
      setSuccess("Password updated! Redirecting to login...");
      setTimeout(() => navigate("/login"), 2000);
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 px-4 py-12 flex justify-center">
      <div className="bg-white p-6 rounded-xl shadow w-full max-w-md self-start">
        <h1 className="text-2xl font-bold mb-4 text-center">🔑 Set New Password</h1>

        {error && (
          <div className="text-sm text-red-600 bg-red-100 p-3 rounded mb-3">
            {error}
          </div>
        )}
        {success && (
          <div className="text-sm text-green-600 bg-green-100 p-3 rounded mb-3">
            {success}
          </div>
        )}

        <form onSubmit={handleUpdate} className="space-y-4">
          <input
            type="password"
            placeholder="New Password"
            className="w-full p-2 border rounded"
            value={newPassword}
            onChange={(e) => setNewPassword(e.target.value)}
            required
          />
          <input
            type="password"
            placeholder="Confirm New Password"
            className="w-full p-2 border rounded"
            value={confirmPassword}
            onChange={(e) => setConfirmPassword(e.target.value)}
            required
          />
          <button
            type="submit"
            className="w-full bg-blue-600 text-white p-2 rounded hover:bg-blue-700 transition"
          >
            Update Password
          </button>
        </form>
      </div>
    </div>
  );
}


# === src\pages\UserDetail.tsx ===
// === src/pages/UserDetail.tsx ===
import { useParams } from 'react-router-dom';
import { useEffect, useState } from 'react';
import { supabase } from '../lib/supabaseClient';
import ProjectCard from './Projects';

export default function UserDetail() {
  const { id } = useParams();
  const [profile, setProfile] = useState<any>(null);
  const [projects, setProjects] = useState<any[]>([]);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchData = async () => {
      const { data: profile, error: profileError } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', id)
        .eq('is_public', true)
        .single();

      if (profileError || !profile) {
        setError('This user profile is private or does not exist.');
        return;
      }

      setProfile(profile);

      const { data: userProjects } = await supabase
        .from('projects')
        .select('*')
        .eq('user_id', id);

      setProjects(userProjects || []);
    };

    fetchData();
  }, [id]);

  if (error) return <p className="text-center mt-20 text-red-500">{error}</p>;
  if (!profile) return <p className="text-center mt-20">Loading...</p>;

  return (
    <div className="max-w-3xl mx-auto mt-8 px-4 space-y-6">
      <div className="bg-white p-6 rounded-xl shadow text-center">
        <img
          src={profile.profile_picture_url || 'https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png'}
          alt="avatar"
          className="w-24 h-24 mx-auto rounded-full object-cover"
        />
        <h2 className="text-2xl font-bold mt-2">{profile.full_name}</h2>
        <p className="text-gray-600 text-sm">{profile.email}</p>
        <p className="mt-2 text-gray-700">{profile.bio || 'No bio.'}</p>
      </div>

      <div className="space-y-4">
        <h3 className="text-xl font-semibold text-gray-800">📁 Projects</h3>
        {projects.length > 0 ? (
          projects.map((project) => (
            <ProjectCard
              key={project.id}
              title={project.title}
              description={project.description}
              ai_score={project.ai_score}
            />
          ))
        ) : (
          <p className="text-gray-500 text-sm">No projects uploaded yet.</p>
        )}
      </div>
    </div>
  );
}


# === src\pages\Users.tsx ===
import { useEffect, useState } from 'react';
import { Link, useLocation } from 'react-router-dom';
import { supabase } from '../lib/supabaseClient';
import {
  PieChart, Pie, Cell, Tooltip, ResponsiveContainer, BarChart, Bar, XAxis, YAxis
} from 'recharts';

function useQuery() {
  return new URLSearchParams(useLocation().search);
}

export default function Users() {
  const [users, setUsers] = useState<any[]>([]);
  const [projects, setProjects] = useState<any[]>([]);
  const [search, setSearch] = useState('');
  const [currentUserId, setCurrentUserId] = useState<string | null>(null);
  const query = useQuery();

const location = useLocation();

    useEffect(() => {
    const searchParams = new URLSearchParams(location.search);
    const q = searchParams.get("q") || "";
    setSearch(q);
    }, [location.search]);


  useEffect(() => {
    (async () => {
      const [{ data: userData }, { data: projectData }, { data: sessionData }] = await Promise.all([
        supabase.from('profiles').select('*').eq('is_public', true),
        supabase.from('projects').select('*'),
        supabase.auth.getSession(),
      ]);

      if (sessionData?.session?.user?.id) {
        setCurrentUserId(sessionData.session.user.id);
      }

      if (userData) setUsers(userData);
      if (projectData) setProjects(projectData);
    })();
  }, []);

  const COLORS = ["#3b82f6", "#e5e7eb"];

  const filteredUsers = users.filter(
    (u) =>
      u.id !== currentUserId &&
      (u.full_name.toLowerCase().includes(search.toLowerCase()) ||
        u.email?.toLowerCase().includes(search.toLowerCase()))
  );

  const getUserProjects = (userId: string) =>
    projects.filter((p) => p.user_id === userId);

  const getUserScoreData = (userId: string) => {
    const userProjects = getUserProjects(userId);
    const average =
      userProjects.length > 0
        ? userProjects.reduce((acc, p) => acc + (p.ai_score || 0), 0) / userProjects.length
        : 0;
    return [
      { name: 'Score', value: average },
      { name: 'Remaining', value: 10 - average }
    ];
  };

  return (
    <div className="max-w-5xl mx-auto mt-8 px-4">
      <h2 className="text-2xl font-bold mb-4">👥 Public Student Portfolios</h2>

      <input
        type="text"
        placeholder="Search by name or email..."
        value={search}
        onChange={(e) => setSearch(e.target.value)}
        autoFocus
        className="mb-6 px-4 py-2 w-full border rounded shadow-sm"
      />

      <div className="space-y-8">
        {filteredUsers.map((u) => {
          const userProjects = getUserProjects(u.id);
          const pieData = getUserScoreData(u.id);

          return (
            <div key={u.id} className="bg-white p-4 rounded-xl shadow-md space-y-4">
              <div className="flex items-center gap-4">
                <img
                    src={
                        (u.profile_picture_url
                        ? `${u.profile_picture_url}?t=${new Date(u.updated_at).getTime()}`
                        : 'https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png')
                    }
                    alt="avatar"
                    className="w-16 h-16 rounded-full object-cover"
                    />
                <div>
                  <Link
                    to={`/user/${u.id}`}
                    className="text-xl font-bold text-blue-600 hover:underline"
                  >
                    {u.full_name}
                  </Link>
                  <p className="text-gray-500 text-sm">{u.bio || 'No bio available'}</p>
                </div>
              </div>

              <div className="grid md:grid-cols-2 gap-6">
                <div className="flex justify-center">
                  <PieChart width={200} height={200}>
                    <Pie
                      data={pieData}
                      dataKey="value"
                      nameKey="name"
                      cx="50%"
                      cy="50%"
                      innerRadius={50}
                      outerRadius={80}
                    >
                      {pieData.map((entry, i) => (
                        <Cell key={`cell-${i}`} fill={COLORS[i % COLORS.length]} />
                      ))}
                    </Pie>
                    <Tooltip />
                  </PieChart>
                </div>

                <div className="min-h-[200px]">
                  <ResponsiveContainer width="100%" height={200}>
                    <BarChart
                      data={userProjects.map((p) => ({ name: p.title, score: p.ai_score ?? 0 }))}
                      margin={{ top: 20, right: 10, left: 10, bottom: 40 }}
                    >
                      <XAxis dataKey="name" tick={{ fontSize: 10 }} angle={-15} textAnchor="end" />
                      <YAxis domain={[0, 10]} />
                      <Tooltip />
                      <Bar dataKey="score" fill="#3b82f6" radius={[4, 4, 0, 0]} />
                    </BarChart>
                  </ResponsiveContainer>
                </div>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
}


# === src\services\api.ts ===
import axios from "axios";

const API = axios.create({
  baseURL: "http://127.0.0.1:8000", // Update if deployed
});

export const fetchProjects = () => API.get("/projects");

export const getProjects = () => {
  return axios.get('http://127.0.0.1:8000/projects');
};
export const submitProject = (data: {
  student_name: string;
  title: string;
  description: string;
}) => API.post("/submit", data);

export const getSuggestion = (title: string) =>
  API.get(`/suggestion?title=${encodeURIComponent(title)}`);
